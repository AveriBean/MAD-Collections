@url = http://localhost:8080

@jwt = eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2xsZWN0LW1lIiwic3ViIjoiU2FsbHkiLCJ1c2VySWQiOjIsImF1dGhvcml0aWVzIjpbIlVTRVIiXSwiZmlyc3ROYW1lIjoiV2Fsa2VyIiwibGFzdE5hbWUiOiJTV2FsayIsImxvY2F0aW9uIjoiMTY1NDcgQmFpc2xleSBCbHZkIiwicGhvbmUiOiIoNzAzKSA1MjgtNzMwMyIsImVtYWlsIjoic3dAZW1haWwuY29tIiwiZXhwIjoxNjgwNzI0ODMzfQ.FjEVifWnr1AyHgUBZnfSq7I7SmP80C2HoS3xFeWKf-Y

GET {{url}}/api/user HTTP/1.1

### [ ] GET a user by ID

GET {{url}}/api/user/2 HTTP/1.1

### [ ] For GET return a 404 if user is not found

GET {{url}}/api/user/400 HTTP/1.1

### [ ] POST a user

POST {{url}}/api/user HTTP/1.1
Content-Type: application/json

{ 
    "firstName": "Testy",
    "lastName": "McTesterson",
    "location": null,
    "username": "TMcTe",
    "password": "passwordHash5",
    "phone": null,
    "email": "tm@testing.com",
    "enabled": true,
    "locked": false,
    "authorities": [],
    "items": [],
    "credentialsNonExpired": true,
    "accountNonExpired": true,
    "accountNonLocked": true
}

### [ ] For POST return a 400 if the user fails one of the domain rules
### [ ] User email is required

POST {{url}}/api/user HTTP/1.1
Content-Type: application/json

{
   "firstName": "Testy",
    "lastName": "McTesterson",
    "location": null,
    "username": "TMcTe",
    "password": "passwordHash5",
    "phone": null,
    "email": "",
    "enabled": true,
    "locked": false,
    "authorities": [],
    "items": [],
    "credentialsNonExpired": true,
    "accountNonExpired": true,
    "accountNonLocked": true
}

### [ ] For POST return a 400 if the user fails one of the domain rules
### [ ] Password Validations

POST {{url}}/api/user HTTP/1.1
Content-Type: application/json

{
   "firstName": "Testy",
    "lastName": "McTesterson",
    "location": null,
    "username": "TMcTe",
    "password": "test",
    "phone": null,
    "email": "tm@testing.com",
    "enabled": true,
    "locked": false,
    "authorities": [],
    "items": [],
    "credentialsNonExpired": true,
    "accountNonExpired": true,
    "accountNonLocked": true
}

### [ ] PUT an existing user

PUT {{url}}/api/user/2 HTTP/1.1
Content-Type: application/json
Authorization: Bearer {{jwt}}

{
    "userId": 2,
    "firstName": "Test",
    "lastName": "Walker",
    "location": "Sally's Address",
    "phone": "262-262-2626",
    "email": "sw@testing.com"
}

### [ ] For PUT return a 400 if the user fails one of the domain rules

PUT {{url}}/api/user/2 HTTP/1.1
Content-Type: application/json
Authorization: Bearer {{jwt}}

{
    "userId": 2,
    "firstName": "Test",
    "lastName": "Walker",
    "location": "Sally's Address",
    "phone": "2622622626",
    "email": ""
}

### [ ] DELETE an user that is not in use by ID

DELETE {{url}}/api/user/4 HTTP/1.1
Authorization: Bearer {{jwt}}

### [ ] For DELETE return a 404 if the user is not found

DELETE {{url}}/api/user/400 HTTP/1.1
Authorization: Bearer {{jwt}}

### [ ] For DELETE return a 400 if the user is in use 

DELETE {{url}}/api/user/1 HTTP/1.1
Authorization: Bearer {{jwt}}


### Bad Credentials

POST {{url}}/authenticate HTTP/1.1
Content-Type: application/json

{
    "username": "bad-username",
    "password": "bad-password"
}

### Good User credentials

POST {{url}}/authenticate HTTP/1.1
Content-Type: application/json

{
    "username": "SWalk" ,
    "password": "go"
}

### Good Admin credentials

POST {{url}}/authenticate HTTP/1.1
Content-Type: application/json

{
    "username": "JMich" ,
    "password": "go"
}


### Refresh token... be sure to replace the token in the Authorization header with a valid token

POST {{url}}/refresh HTTP/1.1
Authorization: Bearer {{jwt}}